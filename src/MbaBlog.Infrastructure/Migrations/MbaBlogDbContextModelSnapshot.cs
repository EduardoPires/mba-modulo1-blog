// <auto-generated />
using System;
using MbaBlog.Mvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MbaBlog.Infrastructure.Migrations
{
    [DbContext(typeof(MbaBlogDbContext))]
    partial class MbaBlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MbaBlog.Domain.Domain.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_cliente_email");

                    b.ToTable("Autores", (string)null);
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.ComentarioPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PostId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId1");

                    b.ToTable("Comentarios", (string)null);
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AutorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ModificadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("VARCHAR(512)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId1");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.ComentarioPost", b =>
                {
                    b.HasOne("MbaBlog.Domain.Domain.Post", "Post")
                        .WithMany("Comentarios")
                        .HasForeignKey("PostId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.Post", b =>
                {
                    b.HasOne("MbaBlog.Domain.Domain.Autor", "Autor")
                        .WithMany("Posts")
                        .HasForeignKey("AutorId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.Autor", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MbaBlog.Domain.Domain.Post", b =>
                {
                    b.Navigation("Comentarios");
                });
#pragma warning restore 612, 618
        }
    }
}
